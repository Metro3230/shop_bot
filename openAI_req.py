from dotenv import load_dotenv
from openai import AsyncOpenAI, APIError
from pathlib import Path
import os
import configparser
import random

script_dir = Path(__file__).parent  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É —Å–∫—Ä–∏–ø—Ç—É
data_dir = script_dir / 'data'
log_file = script_dir / data_dir / 'log.log'
env_file = script_dir / data_dir / '.env'
config_file = data_dir / 'config.ini'
 
config = configparser.ConfigParser()  # –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏ —á–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥–∞
config.read(config_file)

load_dotenv(env_file)
# ai_API_key = os.getenv('OPENAI_API_KEY')    # —á–∏—Ç–∞–µ–º token ai c .env 
ai_model = config['AIconf']['ai_model']
contacts_key_words = config['AIconf']['contacts_key_words'].split(',')  #–º–∞—Å—Å–∏–≤ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –∏–∑–º–µ–Ω—è—é—â–∏–º–∏ –º–æ–¥–µ–ª—å –ø–æ–≤–µ–¥–µ–Ω–∏—è


# –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏, —Å—Ç–æ–ª—å–∫–æ, —Å–∫–æ–ª—å–∫–æ –∏—Ö –µ—Å—Ç—å —É –Ω–∞—Å –≤ .env
ai_API_keys = []
i = 1
while True:
    env_var_name = f"OPENAI_API_KEY_{i}"
    api_key = os.getenv(env_var_name)
    if api_key is None:
        break
    ai_API_keys.append(api_key)
    i += 1


# client = AsyncOpenAI(
#     api_key=ai_API_keys,
#     base_url=config['AIconf']['ai_API_url'],
#     timeout=float(config['AIconf']['ai_req_timeout']),
# )

system_role = {"role": "system", "content": config['AIconf']['ai_role']}
system_role_contacts = {"role": "system", "content": config['AIconf']['ai_role'] + '. ' + config['AIconf']['ai_role_instruction']}


def is_part_in_list(strCheck):   #–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤     
    for i in range(len(contacts_key_words)):
        if strCheck.find(contacts_key_words[i]) != -1:
            return True
    return False




async def req_to_ai(msgs):
    if is_part_in_list(msgs[-1]['content']):  # –µ—Å–ª–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ñ—Ä–∞–∑–µ –µ—Å—Ç—å —Å–ª–æ–≤–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
        msgs.insert(0, system_role_contacts)
    else:
        msgs.insert(0, system_role)
    
    last_exception = None  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –º–∞—Å—Å–∏–≤–∞ –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –µ—ë
    rndm_ai_API_keys = ai_API_keys.copy()
    random.shuffle(rndm_ai_API_keys)
    
    for ai_api_key in ai_API_keys:
        client = AsyncOpenAI(
            api_key=ai_api_key,
            base_url=config['AIconf']['ai_API_url'],
            timeout=float(config['AIconf']['ai_req_timeout']),
        )
        try:
            response = await client.chat.completions.create(
                model=ai_model,
                messages=msgs,
            )
            return response  # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç
        except Exception as e:  # –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –õ–Æ–ë–û–ï –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            last_exception = e  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            continue  # –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫–ª—é—á
    
    if last_exception:
        raise Exception("All API keys failed") from last_exception  # –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å –ø—Ä–∏—á–∏–Ω–æ–π
    else:
        raise Exception("No API keys available or no exception was caught")  # —á—Ç–æ —Ç–æ –¥—Ä—É–≥–æ–µ



async def req_to_ai_norole(msg):
    
    req = [{"role": "user", "content": msg}]
    
    for ai_api_key in ai_API_keys:                    
        client = AsyncOpenAI(
            api_key=ai_api_key,
            base_url=config['AIconf']['ai_API_url'],
            timeout=float(config['AIconf']['ai_req_timeout']),
        )
        try:
            response = await client.chat.completions.create(
                model=ai_model,
                messages=req,
            )
            return response  # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç
        except APIError as e:
            continue  # –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫–ª—é—á
    
    raise Exception(e)   # –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∏ —Ä–∞–∑—É , –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—à–∏–±—ã–∫–∞


# test_msg = "–ê—Ö, –∏—â–µ—à—å –Ω–µ–º–Ω–æ–≥–æ –æ—Å—Ç—Ä—ã—Ö –æ—â—É—â–µ–Ω–∏–π, –¥–∞? üòè –í –º–∏—Ä–µ –ë–î–°–ú —É –Ω–∞—Å –ø–æ–ª–Ω–æ –≥–æ—Ä—è—á–∏—Ö —à—Ç—É—á–µ–∫. –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–≤–æ–µ–≥–æ –æ–ø—ã—Ç–∞ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π, –≤–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑ –ª—é–±–∏–º—á–∏–∫–æ–≤:\n\n1. **–ë–æ–Ω–¥–∞–∂ –∏ —Ñ–∏–∫—Å–∞—Ç–æ—Ä—ã**: —à–∏–∫–∞—Ä–Ω—ã–µ –∫–æ–∂–∞–Ω—ã–µ –∏–ª–∏ –∞—Ç–ª–∞—Å–Ω—ã–µ –≤–µ—Ä–µ–≤–∫–∏, –Ω–∞—Ä—É—á–Ω–∏–∫–∏, –æ—à–µ–π–Ω–∏–∫–∏ ‚Äì –≤—Å—ë –¥–ª—è —Å–ª–∞–¥–æ—Å—Ç–Ω–æ–≥–æ –ø–æ–¥—á–∏–Ω–µ–Ω–∏—è.\n\n2. **–ü–ª–µ—Ç–∏ –∏ —à–ª–µ–ø–∞–ª–∫–∏**: –æ—Ç –º—è–≥–∫–∏—Ö –ø–µ—Ä—ã—à–∫–æ–≤ –¥–æ –±–æ–ª–µ–µ –∂—ë—Å—Ç–∫–æ–≥–æ –∫–æ–∂–∞–Ω–æ–≥–æ –≤–µ–µ—Ä–∞, –≤—ã–±–∏—Ä–∞–π —É—Ä–æ–≤–µ–Ω—å –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–ª–∞–¥–∫–æ–π –±–æ–ª–∏.\n\n3. **–ú–∞—Å–∫–∏ –∏ –∫–ª—è–ø—ã**: —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ç–∞–π–Ω—É –∏ —É—Å–∏–ª–∏—Ç—å –æ—â—É—â–µ–Ω–∏—è. –ù–∏—á—Ç–æ —Ç–∞–∫ –Ω–µ —Ä–∞–∑–±–∞–≤–∏—Ç –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É, –∫–∞–∫ –Ω–µ–±–æ–ª—å—à–æ–π –∫–ª—è–ø.\n\n4. **–§–µ—Ç–∏—à-–æ–¥–µ–∂–¥–∞**: –ª–∞—Ç–µ–∫—Å, –≤–∏–Ω–∏–ª –∏–ª–∏ –∫–æ–∂–∞ ‚Äì –≤—Å—ë, —á—Ç–æ –∑–∞—Å—Ç–∞–≤–∏—Ç —Å–µ—Ä–¥—Ü–∞ –±–∏—Ç—å—Å—è —á–∞—â–µ.\n\n5. **–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∏–º—É–ª—è—Ü–∏—è**: –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç —á–µ–≥–æ-—Ç–æ –Ω–µ–æ–±—ã—á–Ω–æ–≥–æ, –Ω–µ–±–æ–ª—å—à–∞—è –ø–æ—Ä—Ü–∏—è —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –ø—Ä–∏—è—Ç–Ω—ã–º —Å—é—Ä–ø—Ä–∏–∑–æ–º.\n\n–ö–æ–Ω–µ—á–Ω–æ, –≤—Å–µ–≥–¥–∞ –ø–æ–º–Ω–∏ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º —Å–ª–æ–≤–µ –∏ —Å–æ–≥–ª–∞—Å–∏–∏, –≤–µ–¥—å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–ª—è –≤—Å–µ—Ö —Å—Ç–æ—Ä–æ–Ω. –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —á—Ç–æ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –¥–∞–π –∑–Ω–∞—Ç—å! üòâ"

# def req_to_ai_TEST(msgs):

#     return test_msg








# otvet = [
#     {'role': 'assistant', 'content': '–†–∞—Å—Å–∫–∞–∂–∏ —á—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–≤–æ–∏—Ö –∂–µ–ª–∞–Ω–∏—è—Ö?'},
#     {'role': 'user', 'content': '–ú—ã —Å –º–æ–µ–π –¥–µ–≤—É—à–∫–æ–π –ª—é–±–∏–º —á—É—Ç—å –ø–æ–∂–µ—Å—á–µ, —á—Ç–æ —Ç—ã –º–æ–≥ –±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å?'},
#     {'role': 'assistant', 'content': '–£ –Ω–∞—Å –µ—Å—Ç—å –æ—Ç–ª–∏—á–Ω—ã–µ –Ω–∞–±–æ—Ä—ã –¥–ª—è –ë–î–°–ú, –∞ —Ç–∞–∫ –∂–µ —Å–æ–≤–µ—Ç—É—é –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –Ω–∞—Ä—É—á–Ω–∏–∫–∏ –∏ –ø–ª–µ—Ç–∏! '},
#     {'role': 'user', 'content': '–û–≥–æ, –Ω–∞—Ä—É—á–Ω–∏–∫–∏?'},
#     {'role': 'assistant', 'content': '–î–∞, —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Ä—É—á–Ω–∏–∫–∏ —Å–¥–µ–ª–∞—é—Ç –í–∞—à –≤–µ—á–µ—Ä –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–º, –Ω–µ–º–Ω–æ–≥–æ –≤–∏–Ω–∞, –∏ –≤–∞—à–∏ –∂–µ–ª–∞–Ω–∏—è –≤–æ–ø–ª–æ—Ç—è—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å!'},
#     {'role': 'user', 'content': '–í–∞—É, —ç—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∞ –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ—Å—Ç—É–ø–∏—Ç—å —Å –∫–ª—é—á–∏–∫–æ–º?'}
#     ]


# response = req_to_ai(otvet)

# response_text = response.choices[0].message.content

# print(response)
# print(response_text)








