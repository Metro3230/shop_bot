import chat_processing as chat
import openAI_req as openAI
from pathlib import Path
from dotenv import load_dotenv
import re
import os
# import telebot
from telebot.async_telebot import AsyncTeleBot
from telebot import types
from config import mainconf
import telegramify_markdown #–±–∏–±–ª–∏—Ç–µ–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è markdown –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–Ω—ã–π markdown_n2


script_dir = Path(__file__).parent  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É —Å–∫—Ä–∏–ø—Ç—É
data_dir = script_dir / 'data'
log_file = script_dir / data_dir / 'log.log'
env_file = script_dir / data_dir / '.env'

load_dotenv(env_file)
tg_token = os.getenv('TG_TOKEN')    # —á–∏—Ç–∞–µ–º token ai c .env

bot = AsyncTeleBot(tg_token)

#-----------------\/-—Å–µ—Ä–≤–∏—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –∫–ª–∞–≤–∞-\/----------------------------

async def remove_limit(chat_id, message): #---–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –º—É–ª—å—Ç–∏–∫–∞—Ä—Ç—ã---
    try:
        command_parts = message.split(maxsplit=2)         # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —á–∞—Å—Ç–∏

        if len(command_parts) < 2:         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∏ –ø–∞—Ä–æ–ª—å, –∏ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
            await bot.send_message(chat_id, "–û—à–∏–±–∫–∞: —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã /remove_limit <service pass>")
            return
        
        input_password = command_parts[1]

        if input_password == os.getenv('SERVICE_PASS'):        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
            chat.remove_limit(chat_id)   #–≤—ã–∑—ã–≤–∞–µ–º —á–∏—Å—Ç–∫—É –ª–∏–º–∏—Ç–∞ –¥–ª—è —á–∞—Ç–∞
            await bot.send_message(chat_id, "–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –¥–ª—è —Ç–µ–±—è —Å–±—Ä–æ—à–µ–Ω")
        else:
            await bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")

    except Exception as e:
        pass
#----------------------------------------------------------------------------------------


# --------------------–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π----------------------------
@bot.message_handler(func=lambda message: True)
async def echo_message(message):
    message_text = message.text
    chat_id = message.chat.id
    username = message.from_user.username
    
    if message_text.startswith('/'): #–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        if message_text == "/start":
            await bot.send_message(chat_id, mainconf.start_message)
        elif message_text == "/service":
            await bot.send_message(chat_id, '/remove_limit <service pass> - –∑–∞–º–µ–Ω–∏—Ç—å Bearer —Ç–æ–∫–µ–Ω S1\n' +
                                            '—á—Ç–æ —Ç–æ –µ—â–µ\n')
        elif message_text.startswith('/remove_limit'):
            await remove_limit(chat_id, message_text)
            
    else:
        if chat.get_msg_count(chat_id) > mainconf.msgs_limit:            
            keyboard = types.InlineKeyboardMarkup()
            url_button = types.InlineKeyboardButton(text='üëÄ', url=mainconf.site_url)
            keyboard.add(url_button)
            await bot.send_message(chat_id, mainconf.limit_msg, reply_markup=keyboard)                  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π
        else:
            chat.save_message_to_json(chat_id, "user", username, message_text)   #–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Æ–ó–ï–†–ê –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
            # response = openAI.req_to_ai(chat.get_last_messages(chat_id))   #–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ (—á–∞—Ç –∏–¥) –±–æ—Ç—É
            # response_text = response.choices[0].message.content         #–ø–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            response_text = openAI.req_to_ai_TEST(chat.get_last_messages(chat_id))   #–¢–ï–°–¢–û–í–´–ô –û–¢–í–ï–¢ –ë–ï–ó –¢–†–ê–¢–´ –¢–û–ö–ï–ù–û–í
            response_text = telegramify_markdown.markdownify(response_text)      # —á–∏—Å—Ç–∏–º markdown
            chat.save_message_to_json(chat_id, "assistant", username, response_text)      #–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ë–û–¢–ê –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
            await bot.send_message(chat_id, response_text, parse_mode='MarkdownV2')     #–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            
#----------------------------------------------------------------------------------------

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await bot.polling()
    

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())










# chat_id = 1234562789

# print(openAI.req_to_ai(chat.get_last_messages(chat_id)))

